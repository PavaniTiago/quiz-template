// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  quizSessions  QuizSession[]   // Relacionamento com QuizSession
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events       Event[]  // Relationship with Event
  geolocation  Geolocation? // Relationship with Geolocation
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Quiz {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  questions     Question[]      // Relacionamento com perguntas
  quizSessions  QuizSession[]   // Relacionamento com QuizSession
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Question {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  title         String
  description   String?         // Optional description
  tooltipTitle  String?
  tooltipDescription String?
  type          QuestionType    @default(SINGLE_CHOICE) // Setting default type to SINGLE_CHOICE
  image         String?         // Optional image URL or path
  quizId        String          @db.ObjectId
  answers       Answer[]        // Relacionamento com respostas
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  selectedAnswers  SelectedAnswer[] // Opposite relationship with SelectedAnswer
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Answer {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  isCorrect     Boolean         // Indica se a resposta é correta
  questionId    String          @db.ObjectId
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedAnswers  SelectedAnswer[] // Opposite relationship with SelectedAnswer
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model QuizSession {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  userId        String          @db.ObjectId
  quizId        String          @db.ObjectId
  currentQuestionIndex Int      // Índice da pergunta atual
  progress      Int             // Progresso do usuário no quiz (0-100%)
  isCompleted   Boolean         // Indica se o quiz foi completado
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz          Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  selectedAnswers  SelectedAnswer[] // Relacionamento com respostas selecionadas
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model SelectedAnswer {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  quizSessionId String          @db.ObjectId
  questionId    String          @db.ObjectId
  answerId      String          @db.ObjectId
  quizSession   QuizSession     @relation(fields: [quizSessionId], references: [id], onDelete: Cascade)
  question      Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer        Answer          @relation(fields: [answerId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

//analytics
model Event {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  sessionId     String        @db.ObjectId
  eventType     String
  targetTag     String?
  targetId      String?
  targetClass   String?
  href          String?
  path          String
  query         String?
  session       Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

//analytics
model Geolocation {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  ipAddress     String
  country       String
  region        String
  city          String
  zipCode       String
  latitude      Float
  longitude     Float
  sessionId     String        @unique @db.ObjectId // Ensure uniqueness for one-to-one relation
  session       Session       @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TEXT
}

//todo: adicionar UTMS